generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum ERole {
  USER
  ADMIN
}

enum EFuelType {
  SOLAR
  WIND
  HYDRO
}

enum ESteps {
  REDEX_FORM
  UPLOAD_FORM
  LAST_STEP
  REDEX_FIELDS
}

enum EPartner {
  REDEX
}

enum ESystemSteps {
  USER_INFORMATION
  ASSET
  METERING_EVIDENCE
  CERTIFICATION
  PROJECT
  LAST_STEP
}

model User {
  id                   String                 @id @default(auto()) @map("_id") @db.ObjectId
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @default(now())
  active               Boolean                @default(false)
  role                 ERole                  @default(USER)
  email                String?                @unique
  password             String?
  Topic                Topic[]
  Box                  Box[]
  TotalEnergy          TotalEnergy[]
  UserAssetInformation UserAssetInformation[]
  UserSteps            UserSteps[]
  RedexInformation     RedexInformation[]
  UserPorts            UserPorts[]
  Partners             Partners[]
  UserInformation      UserInformation[]
  Asset                Asset[]
  MeteringEvidence     MeteringEvidence[]
  Certification        Certification[]
  Project              Project[]
  SystemSteps          SystemSteps[]
  UserCredentials      UserCredentials[]
}

model Topic {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  userId    String   @db.ObjectId
  user      User?    @relation(fields: [userId], references: [id])
  topicName String
}

model Box {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  serialNumber String?
  userId       String   @db.ObjectId
  user         User?    @relation(fields: [userId], references: [id])
  photoProof   String[]
}

model TotalEnergy {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  pvPower           String?
  loadPower         String?
  gridIn            String?
  gridOut           String?
  batteryCharged    String?
  batteryDischarged String?
  date              String
  topic             String?
  port              String?
  userId            String  @db.ObjectId
  user              User?   @relation(fields: [userId], references: [id])

  @@unique([date, userId])
}

model UserAssetInformation {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  assetOwner String?
  assetName  String?
  fuelType   EFuelType @default(SOLAR)
  country    String?
  address    String?
  latitude   Float?
  longitude  Float?
  capacity   Float?
  userId     String    @db.ObjectId
  user       User?     @relation(fields: [userId], references: [id])
}

model UserSteps {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User?    @relation(fields: [userId], references: [id])
  step      ESteps   @default(REDEX_FORM)
  isFile    Boolean? @default(false)
  status    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model RedexInformation {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userId         String   @db.ObjectId
  user           User?    @relation(fields: [userId], references: [id])
  redexFileId    String?
  ValidationCode String?
  remoteInvIds   String[]
}

model UserPorts {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
  userId       String   @db.ObjectId
  user         User?    @relation(fields: [userId], references: [id])
  port         String
  mqttUsername String?
  mqttPassword String?
  mqttPort     Int?
}

model Partners {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  userId    String   @db.ObjectId
  user      User?    @relation(fields: [userId], references: [id])
  partner   String[]
  status    Boolean  @default(false)
  choice    Boolean  @default(false)
}

model SystemSteps {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime     @default(now())
  updatedAt DateTime     @default(now())
  step      ESystemSteps @default(USER_INFORMATION)
  status    Boolean      @default(false)
  userId    String       @db.ObjectId
  user      User?        @relation(fields: [userId], references: [id])
}

model UserInformation {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now())
  userId           String   @db.ObjectId
  user             User?    @relation(fields: [userId], references: [id])
  firstName        String?
  lastName         String?
  street           String?
  city             String?
  telephone        String?
  customerLanguage String?
  customerTimezone String?
}

model Asset {
  id                       String   @id @default(auto()) @map("_id") @db.ObjectId
  assetName                String
  assetOwner               String
  fuelType                 String
  country                  String
  latitude                 Float
  longitude                Float
  capacityKwp              Float
  service                  String
  codDate                  DateTime
  amountOfInverters        Int
  amountOfPanels           Int
  panelBrand               String
  panelPower               Int
  amountOfBatteries        Int?
  batteryBrand             String?
  batteryModel             String?
  inverterModel            String
  monitoringSystemName     String
  monitoringSystemURL      String
  buildingPhotoUpload      String
  inverterSetupPhotoUpload String
  solarPanelsPhotoUpload   String
  inverterBrand            String?
  BatterySerialNumber1     String?
  BatterySerialNumber2     String?
  BatterySerialNumber3     String?
  InverterSerielnumber1    String?
  InverterSerialnumber1    String?
  InverterSerialnumber2    String?
  InverterSerialnumber3    String?
  userId                   String   @db.ObjectId
  user                     User     @relation(fields: [userId], references: [id])
}

model MeteringEvidence {
  id                          String  @id @default(auto()) @map("_id") @db.ObjectId
  meterId                     String?
  meterBrand                  String?
  meterType                   String?
  meteringEvidencePhotoUpload String
  userId                      String  @db.ObjectId
  user                        User    @relation(fields: [userId], references: [id])
}

model Certification {
  id                                     String  @id @default(auto()) @map("_id") @db.ObjectId
  powerPurchaseAgreement                 String?
  interconnectionAgreement               String?
  commissioningCertificationToGrid       String?
  commissioningCertificationOrInspection String?
  powerQualityTest                       String?
  IDPhotoUploadorCompanyCertificate      String?
  userId                                 String  @db.ObjectId
  user                                   User    @relation(fields: [userId], references: [id])
}

model Project {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  projectBackground  String?
  projectDescription String?
  projectImpact      String?
  userId             String  @db.ObjectId
  user               User    @relation(fields: [userId], references: [id])
}

model UserCredentials {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  userId       String @db.ObjectId
  user         User   @relation(fields: [userId], references: [id])
  clientId     String
  clientSecret String
}
